(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('hyperapp')) :
	typeof define === 'function' && define.amd ? define(['exports', 'hyperapp'], factory) :
	(factory((global['Hyperapp-slider'] = {}),null));
}(this, (function (exports,hyperapp) { 'use strict';

var eventContainer = window.document;

var mouseMoveHandler = null;
var mouseUpHandler = null;

var onMouseMove = function onMouseMove(setMovementX) {
  return function (e) {
    setMovementX(e.movementX);
  };
};

var onMouseUp = function onMouseUp(e) {
  eventContainer.removeEventListener('mousemove', mouseMoveHandler);
  eventContainer.removeEventListener('mouseup', mouseUpHandler);
};

var onMouseDown = function onMouseDown(setMovementX, setInitialMousePosition) {
  return function (e) {
    mouseMoveHandler = onMouseMove(setMovementX);
    mouseUpHandler = onMouseUp;
    eventContainer.addEventListener('mousemove', mouseMoveHandler);
    eventContainer.addEventListener('mouseup', mouseUpHandler);

    setInitialMousePosition();
  };
};

var Handle = function Handle(_ref) {
  var cls = _ref.cls,
      min = _ref.min,
      max = _ref.max,
      value = _ref.value,
      setMovementX = _ref.setMovementX,
      setInitialMousePosition = _ref.setInitialMousePosition;

  var style = {
    position: 'absolute',
    left: value + 'px'
  };

  return hyperapp.h('div', {
    'class': cls + '__handle',
    tabIndex: '0',
    style: style,
    onmousedown: onMouseDown(setMovementX, setInitialMousePosition)
  });
};

var Track = function Track(_ref) {
  var cls = _ref.cls,
      setWidth = _ref.setWidth;
  return hyperapp.h('div', {
    oncreate: function oncreate(el) {
      return setWidth(el.getBoundingClientRect().width);
    },
    'class': cls + '__track'
  });
};

var Fill = function Fill(_ref) {
  var cls = _ref.cls,
      value = _ref.value;

  var style = {
    position: 'absolute',
    left: 0,
    width: value + 'px'
  };

  return hyperapp.h('div', { 'class': cls + '__fill', style: style });
};

var min = Math.min,
    max = Math.max,
    abs = Math.abs,
    round = Math.round;


function isUndefined(v) {
  return typeof v === 'undefined';
}

function Slider(_ref) {
  var baseClass = _ref.baseClass,
      state = _ref.state,
      actions = _ref.actions,
      onChange = _ref.onChange;

  var cls = !isUndefined(baseClass) ? baseClass : 'slider';

  return hyperapp.h(
    'div',
    {
      'class': cls,
      role: 'slider',
      'aria-valuemin': state.min,
      'aria-valuemax': state.max,
      'aria-valuenow': state.value
    },
    hyperapp.h(Track, { cls: cls, setWidth: actions.setDomWidth }),
    hyperapp.h(Fill, { cls: cls, value: state.dom.value }),
    hyperapp.h(Handle, {
      cls: cls,
      min: state.min,
      max: state.max,
      value: state.dom.value,
      setMovementX: actions.setMovementX,
      setInitialMousePosition: actions.dom.setInitialMousePosition
    })
  );
}

Slider.state = function (_ref2) {
  var min = _ref2.min,
      max = _ref2.max,
      value = _ref2.value,
      step = _ref2.step;

  return {
    min: min,
    max: max,
    value: value,
    step: step || 1,
    dom: {
      width: 0,
      value: 0,
      mousePosition: 0
    }
  };
};

Slider.actions = {
  setValue: function setValue(value) {
    return function (state) {
      return { value: value };
    };
  },
  setMovementX: function setMovementX(movementX) {
    return function (state, actions) {
      var mousePosition = state.dom.mousePosition + movementX;
      actions.dom.setMousePosition(mousePosition);

      var valueAtMousePosition = state.min + mousePosition / state.dom.width * (state.max - state.min);

      var clampedValueAtMousePosition = max(state.min, min(state.max, valueAtMousePosition));

      if (state.step === 'any') {
        var newDomValue = (clampedValueAtMousePosition - state.min) / (state.max - state.min) * state.dom.width;
        actions.setValue(clampedValueAtMousePosition);
        actions.dom.setValue(newDomValue);
        return;
      }

      var valueDiff = clampedValueAtMousePosition - state.value;
      if (abs(valueDiff) >= state.step / 2) {
        var step = state.step * round(valueDiff / state.step);
        var newValue = state.value + step;
        var _newDomValue = (newValue - state.min) / (state.max - state.min) * state.dom.width;

        if (newValue >= state.min && newValue <= state.max) {
          actions.setValue(newValue);
          actions.dom.setValue(_newDomValue);
        }
      }
    };
  },
  setDomWidth: function setDomWidth(width) {
    return function (state, actions) {
      var ratio = (state.value - state.min) / (state.max - state.min);
      var domValue = ratio * width;
      actions.dom.setWidth(width);
      actions.dom.setValue(domValue);
    };
  },
  dom: {
    setWidth: function setWidth(width) {
      return function (state) {
        return { width: width };
      };
    },
    setValue: function setValue(value) {
      return function (state) {
        return { value: value };
      };
    },
    setInitialMousePosition: function setInitialMousePosition() {
      return function (state) {
        return { mousePosition: state.value };
      };
    },
    setMousePosition: function setMousePosition(value) {
      return function (state) {
        return { mousePosition: value };
      };
    }
  }
};

exports.Slider = Slider;

Object.defineProperty(exports, '__esModule', { value: true });

})));
