{"version":3,"sources":["Entries.jsx","App.js","serviceWorker.js","index.js"],"names":["perc2color","perc","r","g","Math","round","b","toString","slice","daysInMonth","names","monthNames","date","Date","year","getFullYear","result","id","curMonth","getMonth","push","dayNumber","getDate","day","getDay","month","setDate","getDaysArray","Entries","useState","JSON","parse","window","localStorage","getItem","entries","setEntries","change","key","time","value","updatedEntry","updatedEntries","setItem","stringify","getValue","className","map","htmlFor","onChange","e","parseInt","currentTarget","style","color","note","onNoteChange","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8289f2dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst getDaysArray = function () {\n  const names = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n  ];\n  const date = new Date();\n  const year = date.getFullYear();\n  const result = [];\n  let id = 0;\n  let curMonth = date.getMonth();\n  while (date.getFullYear() === year) {\n    result.push({\n      id,\n      dayNumber: date.getDate(),\n      day: names[date.getDay()],\n      month: monthNames[date.getMonth()],\n      year: date.getFullYear(),\n    });\n    id += 1;\n    date.setDate(date.getDate() - 1);\n\n    if (date.getMonth() !== curMonth) {\n      curMonth = date.getMonth();\n    }\n  }\n  return result;\n};\n\nfunction perc2color(perc) {\n  var r, g, b = 0;\n  if (perc < 50) {\n    r = 255;\n    g = Math.round(5.1 * perc);\n  }\n  else {\n    g = 255;\n    r = Math.round(510 - 5.10 * perc);\n  }\n  var h = r * 0x10000 + g * 0x100 + b * 0x1;\n  return '#' + ('000000' + h.toString(16)).slice(-6);\n}\n\nconst daysInMonth = getDaysArray(2019, 11);\n\nfunction Entries() {\n  const [entries, setEntries] = useState(JSON.parse(window.localStorage.getItem('entries') || '{}'));\n\n  const change = (key, time, value) => {\n    if (!entries[key]) {\n      entries[key] = {};\n    }\n    const updatedEntry = {\n      ...entries[key],\n      [time]: value,\n    };\n    const updatedEntries = {\n      ...entries,\n      [key]: updatedEntry,\n    }\n    setEntries(updatedEntries);\n    window.localStorage.setItem('entries', JSON.stringify(updatedEntries));\n  };\n\n  const getValue = (key, time) => {\n    return entries[key] ? entries[key][time] : ''\n  }\n\n  const getNoteValue = (key) => {\n    return entries[key] ? entries[key].note : ''\n  }\n\n  const onNoteChange = (key, value) => {\n    if (!entries[key]) {\n      entries[key] = {};\n    }\n    const updatedEntry = {\n      ...entries[key],\n      note: value,\n    };\n    const updatedEntries = {\n      ...entries,\n      [key]: updatedEntry,\n    }\n    setEntries(updatedEntries);\n    window.localStorage.setItem('entries', JSON.stringify(updatedEntries));\n  }\n\n  return (\n    <div className=\"mt-4\">\n      {daysInMonth.map((day) => (\n        <div key={day.id} className=\"card mb-4 shadow-sm\">\n          <div className=\"row\">\n            <div className=\"col-md-2 date\" >\n              <h6 className=\"mb-3\">\n                {day.month}\n              </h6>\n              <h5>\n                {day.dayNumber}\n                {' '}\n                {day.day}\n              </h5>\n            </div>\n\n            <div className=\"col-md-2 entry\">\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleFormControlSelect1\">Morning</label>\n                <select\n                  className=\"form-control\"\n                  id=\"exampleFormControlSelect1\"\n                  onChange={(e) => change(day.id, 'morning', parseInt(e.currentTarget.value, 10))}\n                  value={getValue(day.id, 'morning')}\n                  style={{ color: perc2color(100 - getValue(day.id, 'morning') * 10) }}\n                >\n                  <option>-- Select --</option>\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                  <option>6</option>\n                  <option>7</option>\n                  <option>8</option>\n                  <option>9</option>\n                  <option>10</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"col-md-2 entry\">\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleFormControlSelect1\">Afternoon</label>\n                <select\n                  className=\"form-control\"\n                  id=\"exampleFormControlSelect1\"\n                  onChange={(e) => change(day.id, 'afternoon', parseInt(e.currentTarget.value, 10))}\n                  value={getValue(day.id, 'afternoon')}\n                  style={{ color: perc2color(100 - getValue(day.id, 'afternoon') * 10) }}\n                >\n                  <option>-- Select --</option>\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                  <option>6</option>\n                  <option>7</option>\n                  <option>8</option>\n                  <option>9</option>\n                  <option>10</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"col-md-2 entry\">\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleFormControlSelect1\">Night</label>\n                <select\n                  className=\"form-control\"\n                  id=\"exampleFormControlSelect1\"\n                  onChange={(e) => change(day.id, 'night', parseInt(e.currentTarget.value, 10))}\n                  value={getValue(day.id, 'night')}\n                  style={{ color: perc2color(100 - getValue(day.id, 'night') * 10) }}\n                >\n                  <option>-- Select --</option>\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                  <option>6</option>\n                  <option>7</option>\n                  <option>8</option>\n                  <option>9</option>\n                  <option>10</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"col-md-4 entry\">\n              <h6>Notes:</h6>\n              <textarea value={getNoteValue(day.id)} onChange={(e) => onNoteChange(day.id, e.currentTarget.value)} />\n            </div>\n          </div>\n        </div>\n      ))}\n\n    </div>\n  );\n}\n\nexport default Entries;\n","import React from 'react';\nimport './App.css';\nimport Entries from './Entries';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8\">\n            <Entries />\n          </div>\n          <div className=\"col-md-2\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}